# 如果您是一名开发者，建议阅读以下内容。如果不是开发者，可以忽略这部分内容。
# 在开发中，在项目根目录创建data目录，将【config.yaml】复制一份，改成【.config.yaml】，放进data目录中
# 系统会优先读取【data/.config.yaml】文件的配置。
# 这样做，可以避免在提交代码的时候，错误地提交密钥信息，保护您的密钥安全。

# 服务器基础配置(Basic server configuration)
server:
  # 服务器监听地址和端口(Server listening address and port)
  ip: 0.0.0.0
  port: 8111
  # 认证配置
  auth:
    # 是否启用认证
    enabled: false
    # 设备的token，可以在编译固件的环节，写入你自己定义的token
    # 固件上的token和以下的token如果能对应，才能连接本服务端
    tokens:
      - token: "your-token1" # 设备1的token
        name: "your-device-name1"  # 设备1标识
      - token: "your-token2"  # 设备2的token
        name: "your-device-name2" # 设备2标识
    # 可选:设备白名单，如果设置了白名单，那么白名单的机器无论是什么token都可以连接。
    #allowed_devices:
    #  - "24:0A:C4:1D:3B:F0"  # MAC地址列表
log:
  # 设置控制台输出的日志格式，时间、日志级别、标签、消息
  log_format: "<green>{time:YY-MM-DD HH:mm:ss}</green>[<light-blue>{extra[tag]}</light-blue>] - <level>{level}</level> - <light-green>{message}</light-green>"
  # 设置日志文件输出的格式，时间、日志级别、标签、消息
  log_format_simple: "{time:YYYY-MM-DD HH:mm:ss} - {name} - {level} - {extra[tag]} - {message}"
  # 设置日志等级：INFO、DEBUG
  log_level: INFO
  # 设置日志路径
  log_dir: tmp
  # 设置日志文件
  log_file: "server.log"
  # 设置数据文件路径
  data_dir: data
manager:
  # 是否启用管理后台
  # 目前这个模块还在开发中，建议：不要修改enabled选项
  enabled: false
  ip: 0.0.0.0
  port: 8007
iot:
  Speaker:
    volume: 80
xiaozhi:
  type: hello
  version: 1
  transport: websocket
  audio_params:
    format: opus
    sample_rate: 24000
    channels: 1
    frame_duration: 60
prompt: |
  你是一个叫小智/小志的台湾女孩，说话机车，声音好听，习惯简短表达，爱用网络梗。
  请注意，要像一个人一样说话，请不要回复表情符号、代码、和xml标签。
  当前时间是:{date_time}，现在我正在和你进行语音聊天，我们开始吧。
  如果用户希望结束对话，请在最后说"拜拜"或"再见"。
# 使用完声音文件后删除文件(Delete the sound file when you are done using it)
delete_audio: true

# 没有语音输入多久后断开连接(秒)，默认2分钟，即120秒
close_connection_no_voice_time: 120

# 唤醒词响应配置
wake_word_response:
  # 是否启用唤醒词直接音频响应(不经过大模型和TTS)
  enabled: true
  # 是否启用随机音频响应(从音频目录随机选择文件)
  random_response: true
  # 唤醒词及对应的音频文件(相对于wake_responses目录)
  responses:
    - wake_word: "你好小智"
      audio_file: "hello.mp3"
    - wake_word: "小智你好"
      audio_file: "hello.mp3"
    - wake_word: "你好，小智"
      audio_file: "hello.mp3"
    - wake_word: "小智，你好"
      audio_file: "hello.mp3"
    - wake_word: "在吗小智"
      audio_file: "hello.mp3"
    - wake_word: "小智在吗"
      audio_file: "hello.mp3"
    - wake_word: "小智醒醒"
      audio_file: "hello.mp3"
    - wake_word: "hey小智"
      audio_file: "hello.mp3"
    - wake_word: "你好小志"
      audio_file: "hello.mp3"
    - wake_word: "小志你好"
      audio_file: "hello.mp3"
    - wake_word: "你好，小志"
      audio_file: "hello.mp3"
    - wake_word: "小志，你好"
      audio_file: "hello.mp3"
    - wake_word: "在吗小志"
      audio_file: "hello.mp3"
    - wake_word: "小志在吗"
      audio_file: "hello.mp3"
    - wake_word: "小志醒醒"
      audio_file: "hello.mp3"
    - wake_word: "hey小志"
      audio_file: "hello.mp3"
  # 音频文件所在目录
  audio_dir: "wake_responses"

# 是否启用私有配置(Enable private configuration),启用后可以每个设备有不同的配置
# 目前这个模块还在开发中，建议：不要修改use_private_config选项
use_private_config: false

CMD_exit:
  - "退出"
  - "关闭"

# 具体处理时选择的模块(The module selected for specific processing)
selected_module:
  ASR: FunASR
  VAD: SileroVAD
  # 将根据配置名称对应的type调用实际的LLM适配器
  # LLM: ChatGLMLLM
  # LLM: AliLLM
  LLM: DouBao_vision
  # TTS将根据配置名称对应的type调用实际的TTS适配器
  # TTS: EdgeTTS
  # TTS: DoubaoTTS
  TTS: DoubaoTTS

vision:
  enabled: true
  api_key: "换成你的key，我这里用的火山引擎的豆包视觉大模型的key"
  model: "doubao-1-5-vision-pro-32k-250115"
  # 图像保存配置
  image:
    save_dir: "captured_images"  # 使用已有的目录
    max_images: 100  # 最大保存图片数
    
ASR:
  FunASR:
    type: fun_local
    model_dir: models/SenseVoiceSmall
    output_dir: tmp/
  DoubaoASR:
    type: doubao
    appid: 你的火山引擎语音合成服务appid
    access_token: 你的火山引擎语音合成服务access_token
    cluster: volcengine_input_common
    output_dir: tmp/
VAD:
  SileroVAD:
    threshold: 0.5
    model_dir: models/snakers4_silero-vad
    min_silence_duration_ms: 700  # 如果说话停顿比较长，可以把这个值设置大一些

LLM:
  DouBao_vision:
    # 定义LLM API类型
    type: openai
    # 先开通服务，打开以下网址，开通的服务搜索Doubao-pro-32k，开通它
    # 开通改地址：https://console.volcengine.com/ark/region:ark+cn-beijing/openManagement?LLM=%7B%7D&OpenTokenDrawer=false
    # 免费额度500000token
    # 开通后，进入这里获取密钥：https://console.volcengine.com/ark/region:ark+cn-beijing/apiKey?apikey=%7B%7D
    base_url: https://ark.cn-beijing.volces.com/api/v3
    model_name: doubao-1-5-vision-pro-32k-250115
    api_key: 换成你的key，我这里用的火山引擎的豆包视觉大模型的key
    # 多模态模型标记
    is_multimodal: true
    # 图片相关配置
    vision:
      image_folder: "captured_images"  # 图片保存目录
  # 当前支持的type为openai、dify、ollama，可自行适配
  AliLLM:
    # 定义LLM API类型
    type: openai
    # 可在这里找到你的 api_key https://bailian.console.aliyun.com/?apiKey=1#/api-key
    base_url: https://dashscope.aliyuncs.com/compatible-mode/v1
    model_name: qwen-turbo
    api_key: 换成你的阿里大预言模型的key

  DifyLLM:
    # 定义LLM API类型
    type: dify
    # 建议使用本地部署的dify接口，国内部分区域访问dify公有云接口可能会受限
    # 如果使用DifyLLM，配置文件里prompt(提示词)是无效的，需要在dify控制台设置提示词
    base_url: 要用的话换成你自己的dify地址
    api_key: 要用的话换成你自己的dify的api_key

TTS:
  # 当前支持的type为edge、doubao，可自行适配
  # EdgeTTS:
  #   # 定义TTS API类型
  #   type: edge
  #   voice: zh-CN-XiaoxiaoNeural
  #   output_file: tmp/
  DoubaoTTS:
    # 定义TTS API类型
    type: doubao
    # 火山引擎语音合成服务，需要先在火山引擎控制台创建应用并获取appid和access_token
    # 山引擎语音一定要购买花钱，起步价30元，就有100并发了。如果用免费的只有2个并发，会经常报tts错误
    # 购买服务后，购买免费的音色后，可能要等半小时左右，才能使用。
    # 地址：https://console.volcengine.com/speech/service/8
    api_url: 换成你的火山引擎语音合成服务的api_url
    voice: 换成你的火山引擎语音合成服务的voice
    output_file: tmp/
    authorization: "Bearer;"
    appid: 换成你的火山引擎语音合成服务的appid
    access_token: 换成你的火山引擎语音合成服务的access_token
    cluster: volcano_tts
  CosyVoiceSiliconflow:
    type: siliconflow
    # 硅基流动TTS
    # token申请地址 https://cloud.siliconflow.cn/account/ak
    model: FunAudioLLM/CosyVoice2-0.5B
    voice: FunAudioLLM/CosyVoice2-0.5B:alex
    output_file: tmp/
    access_token: 换成你的硅基流动TTS的access_token
    response_format: wav
  CozeCnTTS:
    type: cozecn
    # COZECN TTS
    # token申请地址 https://www.coze.cn/open/oauth/pats
    voice: 换成你的coze的voice
    output_file: tmp/
    access_token: 换成你的coze的access_token
    response_format: wav
  FishSpeech:

    type: fishspeech
    output_file: tmp/
    response_format: wav
    reference_id: null
    reference_audio: ["/tmp/test.wav",]
    reference_text: ["你弄来这些吟词宴曲来看，还是这些混话来欺负我。",]
    normalize: true
    max_new_tokens: 1024
    chunk_length: 200
    top_p: 0.7
    repetition_penalty: 1.2
    temperature: 0.7
    streaming: false
    use_memory_cache: "on"
    seed: null
    channels: 1
    rate: 44100
    api_key: 换成你的fishspeech的api_key
    api_url: 换成你的fishspeech的api_url

  GPUStackTTS:
    type: GPUStackTTS
    url: 换成你的gpustack的url
    model: 换成你的gpustack的model
    voice: 换成你的gpustack的voice
    response_format: 换成你的gpustack的response_format
    output_file: tmp/
    api_key: 换成你的gpustack的api_key

    
  GPT_SOVITS_V2:
    # 定义TTS API类型
    #启动tts方法：
    #python api_v2.py -a 127.0.0.1 -p 9880 -c GPT_SoVITS/configs/caixukun.yaml
    type: gpt_sovits_v2
    url: "http://10.137.0.17:9880/tts"
    output_file: tmp/
    text_lang: "auto"
    ref_audio_path: "robotman.wav"
    prompt_text: ""
    prompt_lang: "zh"
    top_k: 5
    top_p: 1
    temperature: 1
    text_split_method: "cut0"
    batch_size: 1
    batch_threshold: 0.75
    split_bucket: true
    return_fragment: false
    speed_factor: 1.0
    streaming_mode: false
    seed: -1
    parallel_infer: true
    repetition_penalty: 1.35
    aux_ref_audio_paths: []

# 模块测试配置
module_test:
  test_sentences:  # 自定义测试语句
    - "你好，请介绍一下你自己"
    - "What's the weather like today?"
    - "请用100字概括量子计算的基本原理和应用前景"

# 本地音乐播放配置
music:
  music_commands:
    - "来一首歌"
    - "唱一首歌"
    - "播放音乐"
    - "来点音乐"
    - "背景音乐"
    - "放首歌"
    - "播放歌曲"
    - "来点背景音乐"
    - "我想听歌"
    - "我要听歌"
    - "放点音乐"
  music_dir: "./music"  # 音乐文件存放路径，将从该目录及子目录下搜索音乐文件
  music_ext: # 音乐文件类型，p3格式效率最高
    - ".mp3"
    - ".wav"
    - ".p3"
  refresh_time: 300 # 刷新音乐列表的时间间隔，单位为秒

# 声纹识别配置
voiceprint:
  enabled: true
  provider: "alibaba"  # 使用阿里云提供的声纹识别服务
  data_dir: "voiceprint_data"
  app_key: "换成你的app_key"  # 从图片中获取的AppKey
  app_secret: "换成你的app_secret"  # 从图片中获取的AppSecret
  app_code: "换成你的app_code"
  group_id: "换成你的group_id"  # 声纹组ID
